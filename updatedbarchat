"""
Created on Mon Oct 16 12:11:16 2023

@author: MAfolabi
"""

import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

# Sample data for the bar chart
categories = ['Male', 'Female']
values1 = [67.4, 32.6]
values2 = [54.5, 45.5]

# Convert values to percentages
total1 = sum(values1)
total2 = sum(values2)
values1_percentage = [(value / total1) * 100 for value in values1]
values2_percentage = [(value / total2) * 100 for value in values2]

# Create the bar chart
fig, ax = plt.subplots(figsize=(8, 6))  # Adjust the figure size as needed
bar_width = 0.4
index = range(len(categories))

bar1 = ax.bar(index, values1_percentage, bar_width, label='No Prior Authorization', color='#7030A0')#, edgecolor='black', linewidth=2)

# Make the second bar (Category B) light green
bar2 = ax.bar([i + bar_width for i in index], values2_percentage[1], bar_width, label='Prior Authorization', color='#66FFCC')#, edgecolor='black', linewidth=2)

# Add value labels on top of the bars using ax.bar_label
ax.bar_label(bar1, padding=-0, color='black', fontsize=12, label_type='edge', fmt='%.1f%%', fontweight='bold')
ax.bar_label(bar2, padding=-0, color='black', fontsize=12, label_type='edge', fmt='%.1f%%', fontweight='bold')

# Add a legend at the bottom
plt.legend(loc='upper left', bbox_to_anchor=(0.5, -0.2))

# Add title and labels inside the plot
ax.set_title('Gender: Prior Authorization; Yes vs No', fontweight='bold')
ax.set_xlabel('Categories', fontweight='bold')
ax.set_ylabel('Percentage', fontweight='bold')
ax.set_xticks([i + bar_width / 2 for i in index])
ax.set_xticklabels(categories)  # Uncomment to display x-axis labels

# Make y-axis tick labels bold
ax.yaxis.get_label().set_fontweight='bold'

# Make x-axis tick labels (category labels) bold
ax.set_yticklabels(values1_percentage, fontweight='bold')

# Make x-axis tick labels (category labels) bold
ax.set_xticklabels(categories, fontweight='bold')

# Create a custom function to format y-axis labels as percentages
def percentage_formatter(x, pos):
    return f'{x:.0f}%'

# Format y-axis labels as percentages using the custom formatter
y_formatter = mtick.FuncFormatter(percentage_formatter)
ax.yaxis.set_major_formatter(y_formatter)

# Hide the right and top spines
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
#ax.xaxis.set_visible(False)

# Save the plot as an image file
plt.savefig('C:/Users/MAfolabi/OneDrive - STATINMED RESEARCH/Gileadplots/editable_plot.png', dpi=500, orientation='landscape', bbox_inches='tight')

# Show the chart
plt.show()
